{"version":3,"file":"hot/content_scripts/content-0.f812fcbe6b8a012ba7c7.hot-update.js","mappingspNA","sources":["webpack://smith/./content/components/Chat.tsx","webpack://smith/webpack/runtime/getFullHash"],"sourcesContent":["__webpack_require__.$Refresh$.runtime = require('E:/projects/Hacks/projectsmith/smith/node_modules/react-refresh/runtime.js');\n\nvar _jsxFileName = \"E:\\\\projects\\\\Hacks\\\\projectsmith\\\\smith\\\\content\\\\components\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport ABI from \"../utils/ChatGPTABI.json\";\nimport { Contract, Wallet } from \"ethers\";\nconst galadriel = {\n  id: 696969,\n  name: \"Galadriel Devnet\",\n  iconUrl: \"https://framerusercontent.com/images/cm2XdkhbP9YP9hqP2vt72ByxUI.png\",\n  iconBackground: \"#1d4ed8\",\n  nativeCurrency: {\n    name: \"Galadriel\",\n    symbol: \"GAL\",\n    decimals: 18\n  },\n  rpcUrls: {\n    default: {\n      http: [\"https://devnet.galadriel.com\"]\n    }\n  },\n  blockExplorers: {\n    default: {\n      name: \"explorer\",\n      url: \"https://explorer.galadriel.com\"\n    }\n  }\n};\nconst ChatComponent = ({\n  data\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [chatId, setChatId] = useState(null);\n  const privateKey = process.env.PRIVATE_KEY;\n  const contractAddress = \"0xbb28197bccAA45A19dBedC67eFf63c86Ac92Fd2b\";\n  const provider = new ethers.JsonRpcProvider(galadriel.rpcUrls.default.http[0]);\n  const wallet = new Wallet(privateKey, provider);\n  const contract = new Contract(contractAddress, ABI, wallet);\n  useEffect(() => {\n    const initializeChat = async () => {\n      if (chatId === null) {\n        alert(\"Starting chat with current context...\");\n        const transactionResponse = await contract.startChat(`\n            You are a blockchain data analyst and your task is to analyze the following data:\n\n            ${JSON.stringify(data)}\n\n            Use the context and answer my following questions:\n        `);\n        const receipt = await transactionResponse.wait();\n        const newChatId = getChatId(receipt, contract);\n        setChatId(newChatId);\n        console.log(`Chat started with ID: ${newChatId}`);\n      }\n    };\n    initializeChat();\n  }, [chatId]);\n  const handleMessageSubmit = async e => {\n    console.log(\"Sending message...\");\n    e.preventDefault();\n    if (!input.trim()) return;\n    const transactionResponse = await contract.addMessage(input, chatId);\n    const receipt = await transactionResponse.wait();\n    console.log(`Message sent, tx hash: ${receipt.transactionHash}`);\n    await fetchMessages();\n    setInput(\"\");\n  };\n  const fetchMessages = async () => {\n    console.log(\"Fetching messages...\");\n    try {\n      const messages = await contract.getMessageHistoryContents(chatId);\n      const roles = await contract.getMessageHistoryRoles(chatId);\n      const newMessages = messages.map((message, i) => ({\n        role: roles[i],\n        content: message\n      }));\n      setMessages(newMessages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n    }\n  };\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"max-w-md mx-auto mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleMessageSubmit,\n    className: \"flex gap-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: input,\n    onChange: handleInputChange,\n    placeholder: \"Type your message here...\",\n    className: \"flex-1 p-2 border rounded-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMessages,\n    className: \"bg-blue-500 hover:bg-sky-500 text-white font-bold py-2 px-4 rounded mx-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDD03\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"bg-blue-500 hover:bg-sky-500 text-white font-bold py-2 px-4 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Send Message\")), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"mt-4 space-y-2 h-[30vh] overflow-y-auto\",\n    style: {\n      maxHeight: \"30vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, messages.map((msg, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    className: `p-3 overflow-hidden rounded ${msg.role === \"user\" ? \"bg-blue-900\" : \"bg-slate-700\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 39\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, msg.role, \":\"), \" \", msg.content))));\n};\n_s(ChatComponent, \"Su6lHRa0tvnmn2FjkKuvAOdLg9c=\");\n_c = ChatComponent;\nfunction getChatId(receipt, contract) {\n  for (const log of receipt.logs) {\n    try {\n      const parsedLog = contract.interface.parseLog(log);\n      if (parsedLog && parsedLog.name === \"ChatCreated\") {\n        return parseInt(parsedLog.args[1]);\n      }\n    } catch (error) {\n      console.error(\"Could not parse log:\", log);\n    }\n  }\n  return null;\n}\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");\n\nconst $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;\nconst $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(\n\t$ReactRefreshModuleId$\n);\n\nfunction $ReactRefreshModuleRuntime$(exports) {\n\tif (module.hot) {\n\t\tlet errorOverlay;\n\t\tif (typeof __react_refresh_error_overlay__ !== 'undefined') {\n\t\t\terrorOverlay = __react_refresh_error_overlay__;\n\t\t}\n\t\tlet testMode;\n\t\tif (typeof __react_refresh_test__ !== 'undefined') {\n\t\t\ttestMode = __react_refresh_test__;\n\t\t}\n\t\treturn __react_refresh_utils__.executeRuntime(\n\t\t\texports,\n\t\t\t$ReactRefreshModuleId$,\n\t\t\tmodule.hot,\n\t\t\terrorOverlay,\n\t\t\ttestMode\n\t\t);\n\t}\n}\n\nif (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {\n\t$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);\n} else {\n\t$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);\n}","__webpack_require__.h = () => (\"3d45f091220cdfcd72bb\")"],"names":[],"sourceRoot":""}